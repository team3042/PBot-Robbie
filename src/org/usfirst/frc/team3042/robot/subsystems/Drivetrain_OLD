	Solenoid gearShift = new Solenoid(RobotMap.DRIVETRAIN_SOLENOID_SHIFT);
	
    ADIS16448_IMU gyro = new ADIS16448_IMU();
    
    public boolean isHighGear = false;
   
    
    public double kPHigh = 0, kIHigh = 0, kDHigh = 0;
    public double kPLowLeft = 3/*3*/, kILowLeft =0/* 0.02*/, kDLowLeft = 30/*30*/;
    public double kPLowRight = 3/*4*/, kILowRight = 0/*0.02*/, kDLowRight = 30/*40*/;
    public double kPLeft = kPLowLeft, kILeft = kILowLeft, kDLeft = kDLowLeft;
    public double kPRight = kPLowRight, kIRight = kILowRight, kDRight = kDLowRight;
    public double kFLowLeft = (RobotMap.isApollo)? 1.39: 1.41, kFLowRight = (RobotMap.isApollo)? 1.38: 1.39;
    public double kFHighLeft = 0.456, kFHighRight = 0.465;
	public double kFLeft = kFLowLeft, kFRight = kFLowRight;
	double pPos = 0, iPos = 0, fPos = 0;
	int iZone = 0;
		
	double leftSetpoint, rightSetpoint;
	double tolerance = 4.0 / COUNTS_PER_REV;
	
	
	class PeriodicRunnable implements java.lang.Runnable {
		public void run() { 
			leftMotorFront.processMotionProfileBuffer();
			rightMotorFront.processMotionProfileBuffer();
		}
	}
    
	Notifier notifier = new Notifier (new PeriodicRunnable());
	
	public DriveTrain() {

    	initEncoders();
    	
    	resetGyro();
		calibrateGyro();
		
		//Starting talons processing motion profile
    	leftMotorFront.changeMotionControlFramePeriod(5);
    	rightMotorFront.changeMotionControlFramePeriod(5);
    	notifier.startPeriodic(0.005);
    	
    	//Initializing PIDF
    	leftMotorFront.setProfile(1);
    	rightMotorFront.setProfile(1);
    	leftMotorFront.setPID(pPos, iPos, kDLeft);
    	rightMotorFront.setPID(pPos, iPos, kDRight);
    	leftMotorFront.setIZone(iZone);
    	rightMotorFront.setIZone(iZone);
    	leftMotorFront.setF(fPos);
    	rightMotorFront.setF(fPos);
    	
    	leftMotorFront.setProfile(0);
    	rightMotorFront.setProfile(0);
    	leftMotorFront.setPID(kPLeft, kILeft, kDLeft);
    	rightMotorFront.setPID(kPRight, kIRight, kDRight);
    	leftMotorFront.setF(kFLeft);
    	rightMotorFront.setF(kFRight);
    	
    	gearShift.set(false);
    }
	
	void initEncoders() {
		leftEncMotor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		rightEncMotor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		
		leftEncMotor.setStatusFrameRateMs(CANTalon.StatusFrameRate.QuadEncoder, 10);
		rightEncMotor.setStatusFrameRateMs(CANTalon.StatusFrameRate.QuadEncoder, 10);
	
		leftEncMotor.configEncoderCodesPerRev(COUNTS_PER_REV);
		rightEncMotor.configEncoderCodesPerRev(COUNTS_PER_REV);
		
		leftEncMotor.reverseSensor(leftReverseEnc);
		rightEncMotor.reverseSensor(rightReverseEnc);
		
		resetEncoders();
	}
	
	public void shiftGear() {
		if(isHighGear) {
			shiftGearLow();
		}
		else {
			shiftGearHigh();
		}
		
		SmartDashboard.putBoolean("red = lowgear", isHighGear);
		
		leftMotorFront.setPID(kPLeft, kILeft, kDLeft);
    	rightMotorFront.setPID(kPRight, kIRight, kDRight);
    	leftMotorFront.setF(kFLeft);
    	rightMotorFront.setF(kFRight);
	}
	
	public void shiftGearLow() {
		kPLeft = kPLowLeft;
		kILeft = kILowLeft;
		kDLeft = kDLowLeft;
		
		kPRight = kPLowRight;
		kIRight = kILowRight;
		kDRight = kDLowRight;
		
		kFLeft = kFLowLeft;
		kFRight = kFLowRight;
		
		gearShift.set(false);
		isHighGear = false;
	}
	
	public void shiftGearHigh() {
		kPLeft = kPHigh;
		kILeft = kIHigh;
		kDLeft = kDHigh;
		
		kPRight = kPHigh;
		kIRight = kIHigh;
		kDRight = kDHigh;
		
		kFLeft = kFHighLeft;
		kFRight = kFHighRight;
		
		gearShift.set(true);
		isHighGear = true;
	}
	
	public void offsetPosition(double left, double right) {
		left += leftMotorFront.getPosition();
		right += rightMotorFront.getPosition();
		
		leftSetpoint = left;
		rightSetpoint = right;
		
		leftMotorFront.setProfile(1);
		rightMotorFront.setProfile(1);
		  	
		leftMotorFront.changeControlMode(TalonControlMode.Position);
		rightMotorFront.changeControlMode(TalonControlMode.Position);
		    	
		leftMotorFront.set(left);
		rightMotorFront.set(right);
	}
	
	public boolean nearSetpoint() {
		double currentLeftPosition = leftMotorFront.getPosition();
		boolean nearLeft = Math.abs(leftSetpoint - currentLeftPosition) < tolerance;
		
		double currentRightPosition = rightMotorFront.getPosition();
		boolean nearRight = Math.abs(rightSetpoint - currentRightPosition) < tolerance;
		
		return nearLeft && nearRight;
	}
	
	public Rotation2d getGyro() {
		SmartDashboard.putData("IMU", gyro);
		
		return Rotation2d.fromDegrees((RobotMap.isApollo)? gyro.getAngleY() : gyro.getAngleX());
	}
	
	public void resetGyro() {
		gyro.reset();
	}
	
	public void calibrateGyro() {
		gyro.calibrate();
	}
	
	//Motion profile functions
	public void initMotionProfile() {
		
		resetEncoders();
		
		leftMotorFront.clearMotionProfileTrajectories();
		rightMotorFront.clearMotionProfileTrajectories();
		
		leftMotorFront.setProfile(0);
		rightMotorFront.setProfile(0);
		
		leftMotorFront.changeControlMode(TalonControlMode.MotionProfile);
		rightMotorFront.changeControlMode(TalonControlMode.MotionProfile);
		leftMotorFront.set(CANTalon.SetValueMotionProfile.Disable.value);
		rightMotorFront.set(CANTalon.SetValueMotionProfile.Disable.value);
		
		leftMotorFront.clearMotionProfileHasUnderrun();
		rightMotorFront.clearMotionProfileHasUnderrun();
	}
	
	public void pushPoints(CANTalon.TrajectoryPoint leftPoint, CANTalon.TrajectoryPoint rightPoint) {
		leftMotorFront.pushMotionProfileTrajectory(leftPoint);
		rightMotorFront.pushMotionProfileTrajectory(rightPoint);
	}
	
	public MotionProfileStatus[] getMotionProfileStatus() {
		MotionProfileStatus[] motionProfileStatus = new MotionProfileStatus[2];
		motionProfileStatus[0] = new MotionProfileStatus();
		motionProfileStatus[1] = new MotionProfileStatus();
		leftMotorFront.getMotionProfileStatus(motionProfileStatus[0]);
		rightMotorFront.getMotionProfileStatus(motionProfileStatus[1]);
		
		return motionProfileStatus;
	}
	
	//Removing flag hasUnderrun if it has been logged
	public void removeUnderrunLeft() {
		leftMotorFront.clearMotionProfileHasUnderrun();
	}
	
	public void removeUnderrunRight() {
		rightMotorFront.clearMotionProfileHasUnderrun();
	}
	
	public void enableMotionProfile() {
		leftMotorFront.set(CANTalon.SetValueMotionProfile.Enable.value);
		rightMotorFront.set(CANTalon.SetValueMotionProfile.Enable.value);
	}
	
	public void holdMotionProfile() {
		leftMotorFront.set(CANTalon.SetValueMotionProfile.Hold.value);
		rightMotorFront.set(CANTalon.SetValueMotionProfile.Hold.value);
	}
	
	public void disableMotionProfile() {
		leftMotorFront.set(CANTalon.SetValueMotionProfile.Disable.value);
		rightMotorFront.set(CANTalon.SetValueMotionProfile.Disable.value);
	}
}
